{{- $rabbitmq_erlangcookie := env "RABBITMQ_ERLANGCOOKIE" -}}
{{- $rabbitmq_clustername := env "RABBITMQ_CLUSTERNAME" -}}
{{- $rabbitmq_guestpassword := env "RABBITMQ_GUESTPASSWORD" -}}
{{- $rabbitmq_username := env "RABBITMQ_USERNAME" -}}
{{- $rabbitmq_password := env "RABBITMQ_PASSWORD" -}}
{{- $rabbitmq_hipecompile := env "RABBITMQ_HIPECOMPILE" }}
{{- $rabbitmq_management := env "RABBITMQ_MANAGEMENT" -}}
{{- $rabbitmq_managementagent := env "RABBITMQ_MANAGEMENTAGENT" -}}
{{- $rabbitmq_mqtt := env "RABBITMQ_MQTT" -}}
{{- $rabbitmq_stomp := env "RABBITMQ_STOMP" -}}
{{- $rabbitmq_plugins := env "RABBITMQ_PLUGINS" -}}
{{- $rabbitmq_cluster := env "RABBITMQ_CLUSTER" -}}
{{- $rabbitmq_clusterwait := env "RABBITMQ_CLUSTERWAIT" -}}
{{- $rabbitmq_clusterram := env "RABBITMQ_CLUSTERRAM" -}}
#!/usr/bin/with-contenv sh

RABBITMQ_ERLANGCOOKIE="{{$rabbitmq_erlangcookie}}"
RABBITMQ_CLUSTERNAME="{{$rabbitmq_clustername}}"
RABBITMQ_GUESTPASSWORD="{{$rabbitmq_guestpassword}}"
RABBITMQ_USERNAME="{{$rabbitmq_username}}"
RABBITMQ_PASSWORD="{{$rabbitmq_password}}"
RABBITMQ_HIPECOMPILE="{{$rabbitmq_hipecompile}}"
RABBITMQ_MANAGEMENT="{{$rabbitmq_management}}"
RABBITMQ_MANAGEMENTAGENT="{{$rabbitmq_managementagent}}"
RABBITMQ_MQTT="{{$rabbitmq_mqtt}}"
RABBITMQ_STOMP="{{$rabbitmq_stomp}}"
RABBITMQ_PLUGINS="{{$rabbitmq_plugins}}"
RABBITMQ_CLUSTER="{{$rabbitmq_cluster}}"
RABBITMQ_CLUSTERWAIT="{{$rabbitmq_clusterwait}}"
RABBITMQ_CLUSTERRAM="{{$rabbitmq_clusterram}}"

if [ -f /var/lib/rabbitmq/rescue ]; then
    echo "==> Enabling rabbitmq rescue mode"

    touch /etc/services.d/rabbitmq/down

    exit 0
else
    rm -f /etc/services.d/rabbitmq/down
fi

if [ ! -f /var/lib/rabbitmq/.config ]; then
    echo "==> Configuring rabbitmq"

    if [ ! -z "${RABBITMQ_ERLANGCOOKIE}" ]; then
        echo "${RABBITMQ_ERLANGCOOKIE}" > /var/lib/rabbitmq/.erlang.cookie
        chown rabbitmq:rabbitmq /var/lib/rabbitmq/.erlang.cookie
        chmod 400 /var/lib/rabbitmq/.erlang.cookie
    fi

    if [ ! -z "${RABBITMQ_HIPECOMPILE}" ] && [ "${RABBITMQ_HIPECOMPILE}" == "true" ]; then
        su -c "rabbitmqctl hipe_compile ${RABBITMQ_SERVER_CODE_PATH}" rabbitmq
    fi

    if [ ! -z "${RABBITMQ_MANAGEMENT}" ] && [ "${RABBITMQ_MANAGEMENT}" -eq 1 ]; then
        su -c "rabbitmq-plugins enable --offline rabbitmq_management" rabbitmq
    elif [ ! -z "${RABBITMQ_MANAGEMENTAGENT}" ] && [ "${RABBITMQ_MANAGEMENTAGENT}" -eq 1 ]; then
        su -c "rabbitmq-plugins enable --offline rabbitmq_management_agent" rabbitmq
    fi

    if [ ! -z "${RABBITMQ_MQTT}" ] && [ "${RABBITMQ_MQTT}" -eq 1 ]; then
        su -c "rabbitmq-plugins enable --offline rabbitmq_mqtt" rabbitmq
    fi

    if [ ! -z "${RABBITMQ_STOMP}" ] && [ "${RABBITMQ_STOMP}" -eq 1 ]; then
        su -c "rabbitmq-plugins enable --offline rabbitmq_stomp" rabbitmq
    fi

    if [ ! -z "${RABBITMQ_PLUGINS}" ]; then
        PLUGINS=$(echo "${RABBITMQ_PLUGINS}"|tr ',' ' ')
        su -c "rabbitmq-plugins enable --offline ${PLUGINS}" rabbitmq
    fi

    su -c " \
        rabbitmq-server -detached; \
        sleep 30; \
        " rabbitmq

    if [ -z "${RABBITMQ_CLUSTER}" ]; then
        if [ ! -z "${RABBITMQ_CLUSTERNAME}" ]; then
            su -c "rabbitmqctl set_cluster_name ${RABBITMQ_CLUSTERNAME}" rabbitmq
        fi

        if [ ! -z "${RABBITMQ_GUESTPASSWORD}" ]; then
            su -c "rabbitmqctl change_password guest ${RABBITMQ_GUESTPASSWORD}" rabbitmq
        fi

        if [ ! -z "${RABBITMQ_USERNAME}" ] && [ ! -z "${RABBITMQ_PASSWORD}" ]; then
            su -c " \
                rabbitmqctl add_user ${RABBITMQ_USERNAME} ${RABBITMQ_PASSWORD}; \
                rabbitmqctl set_user_tags ${RABBITMQ_USERNAME} administrator; \
                rabbitmqctl set_permissions -p / ${RABBITMQ_USERNAME} \".*\" \".*\" \".*\"; \
                " rabbitmq
        fi
    else
        su -c " \
            rabbitmqctl stop_app; \
            sleep 4; \
            " rabbitmq

        if [ ! -z "${RABBITMQ_CLUSTERWAIT}" ]; then
            sleep "${RABBITMQ_CLUSTERWAIT}"
        fi

        if [ ! -z "${RABBITMQ_CLUSTERRAM}" ] && [ "${RABBITMQ_CLUSTERRAM}" -eq 1 ]; then
            su -c "rabbitmqctl join_cluster --ram ${RABBITMQ_CLUSTER}" rabbitmq
        else
            su -c "rabbitmqctl join_cluster ${RABBITMQ_CLUSTER}" rabbitmq
        fi

        su -c " \
            sleep 4; \
            rabbitmqctl cluster_status; \
            " rabbitmq
    fi

    su -c " \
        rabbitmqctl stop; \
        sleep 4; \
        " rabbitmq

    touch /var/lib/rabbitmq/.config
fi
