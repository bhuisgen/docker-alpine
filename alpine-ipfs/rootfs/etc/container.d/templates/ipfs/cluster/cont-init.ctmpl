{{- $ipfs_init := env "IPFS_INIT" -}}
{{- $ipfs_init_profile := env "IPFS_INITPROFILE" -}}
{{- $ipfs_bootstrap_ip := env "IPFS_BOOTSTRAPIP" -}}
{{- $ipfs_bootstrap_peer_id := env "IPFS_BOOTSTRAPPEERID" -}}
{{- $ipfs_pnet := env "IPFS_PNET" -}}
#!/command/with-contenv sh

IPFS_INIT="{{$ipfs_init}}"
IPFS_INITPROFILE="{{$ipfs_init_profile}}"
IPFS_BOOTSTRAPIP="{{$ipfs_bootstrap_ip}}"
IPFS_BOOTSTRAPPEERID="{{$ipfs_bootstrap_peer_id}}"
IPFS_PNET="{{$ipfs_pnet}}"

if [ ! -f /var/lib/ipfs/.config ]; then
    if [ -n "${IPFS_INIT}" ] && [ "${IPFS_INIT}" -eq 1 ]; then
        su -s /bin/sh -c "ipfs init --profile ${IPFS_INITPROFILE}" ipfs
    fi

    su -s /bin/sh -c "ipfs bootstrap rm all" ipfs
    su -s /bin/sh -c "ipfs bootstrap add /ip4/${IPFS_BOOTSTRAPIP}/tcp/4001/ipfs/${IPFS_BOOTSTRAPPEERID}" ipfs   

    if [ -n "${IPFS_PNET}" ] && [ "${IPFS_PNET}" -eq 1 ]; then
        printf "%s" "1" > /var/run/s6/container_environment/LIBP2P_FORCE_PNET
    fi

    su -s /bin/sh -c "ipfs config Addresses.API /ip4/0.0.0.0/tcp/5001" ipfs
    su -s /bin/sh -c "ipfs config Addresses.Gateway /ip4/0.0.0.0/tcp/8080" ipfs

    su -s /bin/sh -c "ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin '[\"*\"]'" ipfs
    su -s /bin/sh -c "ipfs config --json API.HTTPHeaders.Access-Control-Allow-Methods '[\"PUT\", \"GET\", \"POST\"]'" ipfs
    su -s /bin/sh -c "ipfs config --json API.HTTPHeaders.Access-Control-Allow-Headers '[\"Authorization\"]'" ipfs
    su -s /bin/sh -c "ipfs config --json API.HTTPHeaders.Access-Control-Expose-Headers '[\"Location\"]'" ipfs
    su -s /bin/sh -c "ipfs config --json API.HTTPHeaders.Access-Control-Allow-Credentials '[\"true\"]'" ipfs

    touch /var/lib/ipfs/.config
fi
